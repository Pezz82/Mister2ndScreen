// src/service-worker.ts
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare const self: ServiceWorkerGlobalScope;

// Precache all assets generated by your build process
// This uses the __WB_MANIFEST variable injected by workbox-webpack-plugin
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing for SPA
const handler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

// Cache images from art providers with a Cache-First strategy
registerRoute(
  ({ url }) => 
    url.origin === 'https://api.screenscraper.fr' || 
    url.origin === 'https://www.steamgriddb.com' ||
    url.pathname.match(/\.(jpg|jpeg|png|gif|webp|svg)$/),
  new CacheFirst({
    cacheName: 'game-images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache control overlay images with a Cache-First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/overlays/'),
  new CacheFirst({
    cacheName: 'control-overlays',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 24 * 60 * 60, // 60 days
      }),
    ],
  })
);

// Cache API responses with a StaleWhileRevalidate strategy
registerRoute(
  ({ url }) => 
    url.pathname.includes('/api/') || 
    url.origin === 'https://api.screenscraper.fr' ||
    url.origin === 'https://www.steamgriddb.com',
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 1 * 24 * 60 * 60, // 1 day
      }),
    ],
  })
);

// Handle offline fallback
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
  }
});

// Listen for messages from the client
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
